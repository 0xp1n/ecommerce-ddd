<?php

declare(strict_types=1);

namespace Shared\Domain\ValueObjects\Geography;

use Shared\Domain\ValueObjects\Generic\Text;

class PostalCode extends Text
{
    public function __construct(string $postcode, private readonly CountryCode $country)
    {
        $postcode = trim(mb_strtoupper($postcode, 'UTF-8'));

        $this->validate($postcode);
        parent::__construct($postcode);
    }

    public function country(): CountryCode
    {
        return $this->country;
    }

    public static function validationRuleBasedOnCountry(string $country): string
    {
        return match ($country) {
            'AF' => "/[0-9]{4}/",
            'AL' => "/(120|122)[0-9]{2}/",
            'DZ' => '/[0-9]{5}/',
            'AS' => '/[0-9]{5}/',
            'AD' => '/[0-9]{5}/',
            'AO' => '/^\d{5}$/',
            'AI' => '/AI-2640/',
            'AG' => '/\d{5}(?:[-\s]\d{4})?/',
            'AR' => '/[A-Z]{1}[0-9]{4}[A-Z]{3}/',
            'AM' => '/[0-9]{4}/',
            'AW' => '/^\d{5}$/',
            'AU' => '/[0-9]{4}/',
            'AT' => '/[0-9]{4}/',
            'AZ' => '/[0-9]{4}/',
            'BS' => '/^\d{5}$/',
            'BH' => '/^\d{5}$/',
            'BD' => '/[0-9]{4}/',
            'BB' => '/BB[0-9]{5}/',
            'BY' => '/[0-9]{6}/',
            'BE' => '/[0-9]{4}/',
            'BZ' => '/^\d{5}$/',
            'BJ' => '/^\d{5}$/',
            'BM' => '/[A-Z]{2}[0-9]{2}/',
            'BT' => '/[0-9]{5}/',
            'BO' => '/^\d{5}$/',
            'BQ' => '/^\d{5}$/',
            'BA' => '/[0-9]{5}/',
            'BW' => '/^\d{5}$/',
            'BR' => '/[0-9]{5}-[0-9]{3}/',
            'BN' => '/[A-Z]{2}[0-9]{4}/',
            'BG' => '/[0-9]{4}/',
            'BF' => '/^\d{5}$/',
            'BI' => '/^\d{5}$/',
            'KH' => '/[0-9]{5}/',
            'CM' => '/^\d{5}$/',
            'CA' => '/[A-Z][0-9][A-Z] ?[0-9][A-Z][0-9]/',
            'CI' => '/^\d{5}$/',
            'CV' => '/[0-9]{4}/',
            'KY' => '/[A-Z]{2}[0-9]-[0-9]{4}/',
            'CF' => '/^\d{5}$/',
            'TD' => '/^\d{5}$/',
            'CL' => '/[0-9]{7}/',
            'CN' => '/[0-9]{6}/',
            'CO' => '/[0-9]{6}/',
            'KM' => '/^\d{5}$/',
            'CG' => '/^\d{5}$/',
            'CD' => '/^\d{5}$/',
            'CK' => '/^\d{5}$/',
            'CR' => '/[0-9]{5}/',
            'HR' => '/[0-9]{5}/',
            'CU' => '/[0-9]{5}/',
            'CW' => '/^\d{5}$/',
            'CY' => '/[0-9]{4}/',
            'CZ' => '/[0-9]{3} [0-9]{2}/',
            'DK' => '/[0-9]{5}/',
            'DJ' => '/^\d{5}$/',
            'DM' => '/^\d{5}$/',
            'DO' => '/[0-9]{5}/',
            'TL' => '/^\d{5}$/',
            'EC' => '/[0-9]{6}/',
            'EG' => '/[0-9]{5}/',
            'SV' => '/[0-9]{4}/',
            'ER' => '/^\d{5}$/',
            'EE' => '/[0-9]{5}/',
            'ET' => '/[0-9]{4}/',
            'FK' => '/FIQQ 1ZZ/',
            'FO' => '/[0-9]{3}/',
            'FJ' => '/^\d{5}$/',
            'FI' => '/[0-9]{5}/',
            'FR' => '/[0-9]{5}/',
            'PF' => '/[0-9]{5}/',
            'GA' => '/^\d{5}$/',
            'GM' => '/^\d{5}$/',
            'GE' => '/^\d{5}$/',
            'DE' => '/[0-9]{5}/',
            'GH' => '/^\d{5}$/',
            'GI' => '/GX11 1AA/',
            'GR' => '/[0-9]{3} [0-9]{2}/',
            'GL' => '/[0-9]{4}/',
            'GD' => '/^\d{5}$/',
            'GP' => '/971[0-9]{2}/',
            'GU' => '/\d{5}(?:[-\s]\d{4})?/',
            'GT' => '/[0-9]{5}/',
            'GG' => '/([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9][A-Za-z]?))))\s?[0-9][A-Za-z]{2})/',
            'GW' => '/[0-9]{4}/',
            'GQ' => '/^\d{5}$/',
            'GN' => '/[0-9]{3}/',
            'GY' => '/^\d{5}$/',
            'GF' => '/973[0-9]{2}/',
            'HT' => '/[0-9]{4}/',
            'HN' => '/[0-9]{5}/',
            'HK' => '/^\d{5}$/',
            'HU' => '/[0-9]{4}/',
            'IS' => '/[0-9]{3}/',
            'IN' => '/[1-9][0-9]{5}/',
            'ID' => '/[0-9]{5}/',
            'IR' => '/[0-9]{5}/',
            'IQ' => '/[0-9]{5}/',
            'IE' => '/(?:^[AC-FHKNPRTV-Y][0-9]{2}|D6W)[ -]?[0-9AC-FHKNPRTV-Y]{4}$/',
            'IL' => '/[0-9]{5}|[0-9]{7}/',
            'IT' => '/[0-9]{5}/',
            'JM' => '/^\d{5}$/',
            'JP' => '/[0-9]{3}-[0-9]{4}/',
            'JE' => '/([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9][A-Za-z]?))))\s?[0-9][A-Za-z]{2})/',
            'JO' => '/[0-9]{5}/',
            'KZ' => '/[0-9]{6}/',
            'KE' => '/[0-9]{5}/',
            'KI' => '/^\d{5}$/',
            'KR' => '/[0-9]{5}/',
            'KP' => '/^\d{5}$/',
            'XK' => '/[0-9]{5}/',
            'KW' => '/[0-9]{5}/',
            'KG' => '/[0-9]{6}/',
            'LA' => '/[0-9]{5}/',
            'LV' => '/LV-[0-9]{4}/',
            'LB' => '/[0-9]{4} [0-9]{4}/',
            'LS' => '/[0-9]{3}/',
            'LR' => '/[0-9]{4}/',
            'LY' => '/^\d{5}$/',
            'LI' => '/[0-9]{4}/',
            'LT' => '/LT-[0-9]{5}/',
            'LU' => '/[0-9]{4}/',
            'MO' => '/^\d{5}$/',
            'MK' => '/[0-9]{4}/',
            'MG' => '/[0-9]{3}/',
            'MW' => '/^\d{5}$/',
            'MY' => '/[0-9]{5}/',
            'MV' => '/[0-9]{5}/',
            'ML' => '/^\d{5}$/',
            'MT' => '/[A-Z]{3} [0-9]{4}/',
            'MH' => '/\d{5}(?:[-\s]\d{4})?/',
            'MQ' => '/972[0-9]{2}/',
            'MR' => '/^\d{5}$/',
            'MU' => '/[0-9]{5}/',
            'YT' => '/976[0-9]{2}/',
            'MX' => '/[0-9]{5}/',
            'MD' => '/MD-?[0-9]{4}/',
            'MC' => '/980[0-9]{2}/',
            'MN' => '/[0-9]{5}/',
            'ME' => '/[0-9]{5}/',
            'MS' => '/MSR [0-9]{4}/',
            'MA' => '/[0-9]{5}/',
            'MZ' => '/[0-9]{4}/',
            'MM' => '/[0-9]{5}/',
            'NA' => '/^\d{5}$/',
            'NR' => '/^\d{5}$/',
            'NP' => '/[0-9]{5}/',
            'NL' => '/(?:NL-)?(\d{4})\s*([A-Z]{2})/',
            'NC' => '/988[0-9]{2}/',
            'NZ' => '/[0-9]{4}/',
            'NI' => '/^\d{5}$/',
            'NE' => '/[0-9]{4}/',
            'NG' => '/[0-9]{6}/',
            'NU' => '/^\d{5}$/',
            'MP' => '/96950/',
            'NO' => '/[0-9]{4}/',
            'OM' => '/[0-9]{3}/',
            'PK' => '/[0-9]{5}/',
            'PW' => '/\d{5}(?:[-\s]\d{4})?/',
            'PA' => '/[0-9]{4}/',
            'PG' => '/[0-9]{3}/',
            'PY' => '/[0-9]{4}/',
            'PE' => '/[0-9]{5}/',
            'PH' => '/[0-9]{4}/',
            'PL' => '/[0-9]{2}-[0-9]{3}/',
            'PT' => '/[0-9]{4}-[0-9]{3}/',
            'PR' => '/\d{5}(?:[-\s]\d{4})?/',
            'QA' => '/^\d{5}$/',
            'RE' => '/974[0-9]{2}/',
            'RO' => '/[0-9]{6}/',
            'RU' => '/[0-9]{6}/',
            'RW' => '/^\d{5}$/',
            'WS' => '/WS[0-9]{4}/',
            'ST' => '/^\d{5}$/',
            'SA' => '/[0-9]{5}(-[0-9]{4})?/',
            'SN' => '/[0-9]{5}/',
            'RS' => '/[0-9]{5}/',
            'SC' => '/^\d{5}$/',
            'SL' => '/^\d{5}$/',
            'SG' => '/[0-9]{6}/',
            'SK' => '/[0-9]{3} [0-9]{2}/',
            'SI' => '/[0-9]{4}/',
            'SB' => '/^\d{5}$/',
            'SO' => '/[A-Z]{2} [0-9]{5}/',
            'ZA' => '/[0-9]{4}/',
            'SS' => '/^\d{5}$/',
            'ES' => '/[0-9]{5}/',
            'LK' => '/[0-9]{4}/',
            'BL' => '/[0-9]{5}/',
            'VI' => '/\d{5}(?:[-\s]\d{4})?/',
            'SE' => '/[0-9]{3} [0-9]{2}/',
            'SH' => '/STHL 1ZZ/',
            'KN' => '/[A-Z]{2}[0-9]{4}/',
            'LC' => '/[A-Z]{2}[0-9]{2} [0-9]{3}/',
            'SX' => '/^\d{5}$/',
            'VC' => '/VC[0-9]{4}/',
            'SD' => '/[0-9]{5}/',
            'SR' => '/^\d{5}$/',
            'SZ' => '/[A-Z]{1}[0-9]{3}/',
            'CH' => '/[0-9]{4}/',
            'SY' => '/^\d{5}$/',
            'TW' => '/[0-9]{3}(-[0-9]{2})?/',
            'TZ' => '/[0-9]{5}/',
            'TH' => '/[0-9]{5}/',
            'TG' => '/^\d{5}$/',
            'TO' => '/^\d{5}$/',
            'VG' => '/VG[0-9]{4}/',
            'TT' => '/[0-9]{6}/',
            'TN' => '/[0-9]{4}/',
            'TR' => '/[0-9]{5}/',
            'TM' => '/[0-9]{6}/',
            'TC' => '/TKCA 1ZZ/',
            'TV' => '/^\d{5}$/',
            'UG' => '/^\d{5}$/',
            'UA' => '/[0-9]{5}/',
            'AE' => '/^\d{5}$/',
            'GB' => '/([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9][A-Za-z]?))))\s?[0-9][A-Za-z]{2})/',
            'US' => '/\d{5}(?:[-\s]\d{4})?/',
            'UY' => '/[0-9]{5}/',
            'UZ' => '/[0-9]{6}/',
            'VU' => '/^\d{5}$/',
            'VE' => '/[0-9]{4}(-[A-Z]{1})?/',
            'VN' => '/[0-9]{6}/',
            'YE' => '/^\d{5}$/',
            'ZM' => '/[0-9]{5}/',
            'ZW' => '/^\d{5}$/',
        };
    }

    private function validate(string $value): void
    {
        $regex = self::validationRuleBasedOnCountry($this->country()->value());

        if (!preg_match($regex, $value)) {
            throw new \InvalidArgumentException("The given postcode {$value} is not valid for country {$this->country()->value()}");
        }
    }
}
